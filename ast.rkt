#lang racket

(provide (all-defined-out))

(struct id (src) #:prefab)
(struct number (src) #:prefab)

(struct expr () #:prefab)
(struct expr:string expr (src) #:prefab)
(struct expr:paren expr (l-paren inner r-paren) #:prefab)
(struct expr:postfix expr (prim op expr) #:prefab)
(struct expr:unary expr (op expr) #:prefab)
(struct expr:equal expr (lhs op rhs) #:prefab)
(struct expr:rel expr (lhs op rhs) #:prefab)
(struct expr:mult expr (lhs op rhs) #:prefab)
(struct expr:and expr (lhs op rhs) #:prefab)
(struct expr:add expr (lhs op rhs) #:prefab)
(struct expr:shift expr (lhs op rhs) #:prefab)
(struct expr:xor expr (lhs op rhs) #:prefab)
(struct expr:or expr (lhs op rhs) #:prefab)
(struct expr:&& expr (lhs op rhs) #:prefab)
(struct expr:or_op expr (lhs op rhs) #:prefab)
(struct expr:ternary expr (lhs ? mid : 3rd) #:prefab)
(struct expr:assign expr (lhs op rhs) #:prefab)

(struct expr:ref            expr (id) #:prefab)
(struct expr:compound       expr (type inits) #:prefab)
(struct expr:call           expr (function arguments) #:prefab)
(struct expr:member         expr (expr label) #:prefab)
(struct expr:pointer-member expr (expr label) #:prefab)
(struct expr:prefix         expr (op expr) #:prefab)
(struct expr:cast           expr (type expr) #:prefab)
(struct expr:sizeof         expr (term) #:prefab)
(struct expr:unop           expr (op expr) #:prefab)
(struct expr:binop          expr (left op right) #:prefab)
(struct expr:begin          expr (left right) #:prefab)
(struct expr:if             expr (test cons alt) #:prefab)


(struct stmt () #:prefab)
(struct stmt:expr     stmt (expr semi) #:prefab)
(struct stmt:if       stmt (if-kw lparen c rparen t else-kw f) #:prefab)
(struct stmt:empty    stmt (semi) #:prefab)
(struct stmt:label    stmt (label colon stmt) #:prefab)
(struct stmt:goto     stmt (goto label semi) #:prefab)
(struct stmt:case     stmt (kw expr colon body) #:prefab)
(struct stmt:default  stmt (kw body) #:prefab)
(struct stmt:comp     stmt (lbrace items rbrace) #:prefab)
(struct stmt:switch   stmt (kw l test r body) #:prefab)
(struct stmt:while    stmt (kw l test r body) #:prefab)
(struct stmt:do       stmt (do-kw body while-kw l test r) #:prefab)
(struct stmt:for      stmt (kw l e1 e2 e3 r body) #:prefab)
(struct stmt:continue stmt (kw semi) #:prefab)
(struct stmt:break    stmt (kw semi) #:prefab)
(struct stmt:return   stmt (kw result semi) #:prefab)


(struct decl () #:prefab)
(struct decl:decl (specifiers declarators semi) #:prefab)
(struct decl:paren decl (l inner r) #:prefab)
(struct decl:param_list decl (l inner r) #:prefab)
(struct decl:param decl (specifiers declarator) #:prefab)
(struct decl:declarator decl (pointer direct suffix) #:prefab)
(struct decl:init_declarator decl (declarator = initializer) #:prefab)
;; FIXME how should I represent an alternative grammar rule, in general?
(struct decl:initializer decl (l value r) #:prefab)

(struct decl:typedef           decl (type declarators) #:prefab)
(struct decl:vars              decl (storage-class type declarators) #:prefab)
(struct decl:formal            decl (storage-class type declarator) #:prefab)
(struct decl:function          decl (storage-class inline? return-type declarator preamble body) #:prefab)
;; (struct decl:declarator        decl (id type initializer) #:prefab)
(struct decl:member            decl (type declarators) #:prefab)
(struct decl:member-declarator decl (id type initializer bit-size) #:prefab)

(struct type () #:prefab)
(struct type:array     type (l inner r) #:prefab)

(struct type:primitive type (name) #:prefab)
(struct type:ref       type (id) #:prefab)
(struct type:struct    type (tag fields) #:prefab)
(struct type:union     type (tag variants) #:prefab)
(struct type:enum      type (tag variants) #:prefab)
;; (struct type:array     type (base static? qualifiers length star?) #:prefab)
(struct type:pointer   type (base qualifiers) #:prefab)
(struct type:function  type (return formals) #:prefab)
(struct type:qualified type (type qualifiers) #:prefab)
  
(struct id:var       id (name) #:prefab)
(struct id:label     id (name) #:prefab)
(struct id:qualifier id (name) #:prefab)
(struct id:op        id (name) #:prefab)
(struct id:ellipsis  id () #:prefab)
(struct id:storage   id (class) #:prefab)
(struct id:inline    id () #:prefab)
(struct id:star      id () #:prefab)
